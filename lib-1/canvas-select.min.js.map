{"version":3,"file":"canvas-select.min.js","sources":["../src/shape/Shape.ts","../src/tools.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/shape/Line.ts","../src/shape/Circle.ts","../src/shape/Connectivity.ts","../src/index.ts"],"sourcesContent":["import { createUuid } from \"../tools\";\n\ninterface ShapeProp {\n  type: number;\n  [key: string]: any;\n}\nexport default class Shape {\n  public label: string = \"\";\n  public hideLabel = false;\n  public coor: any[] = [];\n  public rectangleConnectivity: any = [];\n  public lineCoorIndex: any[] = [];\n  public strokeStyle: string;\n  public fillStyle: string;\n  public labelFillStyle: string;\n  public textFillStyle: string;\n  public labelFont: string;\n  public type: number; // 形状\n  public active: boolean = false;\n  public creating: boolean = false;\n  public dragging: boolean = false;\n  public index: number;\n  public uuid: string = createUuid();\n  public data: any = {};\n  public previousCoor: any[] = [];\n  constructor(item: ShapeProp, index: number) {\n    item.index = index;\n    this.index = index;\n    Object.assign(this, item);\n  }\n}\n","export function createUuid(): string {\n    const s: any[] = [];\n    const hexDigits = '0123456789abcdef';\n    for (let i = 0; i < 36; i++) {\n        const m = Math.floor(Math.random() * 0x10)\n        s[i] = hexDigits.slice(m, m + 1);\n    }\n    s[14] = '4';\n    const n = (s[19] & 0x3) | 0x8\n    s[19] = hexDigits.slice(n, n + 1);\n    s[8] = s[13] = s[18] = s[23] = '-';\n    const uuid = s.join('');\n    return uuid;\n}\n","import Shape from './Shape';\n\nexport default class Rect extends Shape {\n  public type = 1\n  constructor(item: any, index: number) {\n    super(item, index)\n  }\n  get ctrlsData() {\n    const [[x0, y0], [x1, y1]] = this.coor;\n    return [\n      [x0, y0],\n      [x0 + (x1 - x0) / 2, y0],\n      [x1, y0],\n      [x1, y0 + (y1 - y0) / 2],\n      [x1, y1],\n      [x0 + (x1 - x0) / 2, y1],\n      [x0, y1],\n      [x0, y0 + (y1 - y0) / 2],\n    ];\n  }\n}\n","import Shape from './Shape';\n\nexport default class Polygon extends Shape {\n  public type = 2\n  constructor(item: any, index: number) {\n    super(item, index)\n  }\n  get ctrlsData() {\n    return this.coor.length > 2 ? this.coor : [];\n  }\n}\n","import Shape from './Shape';\n\nexport default class Dot extends Shape {\n    public type = 3\n    constructor(item: any, index: number) {\n        super(item, index)\n    }\n}\n","export default class EventBus {\n    public _eventTree: Record<string, any> = {}\n    /**\n   * 注册事件\n   * @param eventName 事件名称\n   * @param cb 回调方法\n   */\n    on(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.push(cb);\n        } else {\n            this._eventTree[eventName] = [cb];\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param eventName 事件名称\n     * @param payload 传递参数\n     */\n    emit(eventName: string, ...payload: any) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => fn(...payload));\n        }\n    }\n\n    /**\n     * 注销事件\n     * @param eventName 事件名称\n     * @param cb 传递参数\n     */\n    off(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        const index = fns.find((fn: Function) => fn === cb);\n        if (Array.isArray(fns) && index) {\n            fns.splice(index, 1);\n        }\n    }\n}\n","import Shape from './Shape';\n\nexport default class Line extends Shape {\n  public type = 4\n  constructor(item: any, index: number) {\n    super(item, index)\n  }\n  get ctrlsData() {\n    return this.coor.length > 1 ? this.coor : [];\n  }\n}\n","import Shape from './Shape';\n\nexport default class Circle extends Shape {\n    public type = 5\n    public radius = 0\n    constructor(item: any, index: number) {\n        super(item, index)\n        this.radius = item.radius || this.radius\n    }\n    get ctrlsData() {\n        const [x, y] = this.coor\n        return [\n            [x, y - this.radius],\n            [x + this.radius, y],\n            [x, y + this.radius],\n            [x - this.radius, y]\n        ]\n    }\n}\n","import Shape from \"./Shape\";\n\nexport default class Connectivity extends Shape {\n  public type = 6;\n  constructor(item: any, index: number) {\n    super(item, index);\n  }\n  get ctrlsData() {\n    return this.coor.length > 1 ? this.coor : [];\n  }\n}\n","import Rect from \"./shape/Rect\";\nimport Polygon from \"./shape/Polygon\";\nimport Dot from \"./shape/Dot\";\nimport EventBus from \"./EventBus\";\nimport Line from \"./shape/Line\";\nimport Circle from \"./shape/Circle\";\nimport pkg from \"../package.json\";\nimport Shape from \"./shape/Shape\";\nimport Connectivity from \"./shape/Connectivity\";\nimport fabric from \"fabric/fabric-impl\";\n\ntype Point = [number, number];\nexport interface Point2 {\n  x: number;\n  y: number;\n}\ntype AllShape = Rect | Polygon | Dot | Line | Circle | Connectivity;\n\nexport default class CanvasSelect extends EventBus {\n  version = pkg.version;\n\n  lock: boolean = false; // 只读模式\n\n  MIN_WIDTH = 10;\n\n  MIN_HEIGHT = 10;\n\n  MIN_RADIUS = 5;\n\n  strokeStyle = \"#0f0\";\n\n  fillStyle = \"rgba(0, 0, 255,0.1)\";\n\n  activeStrokeStyle = \"#f00\";\n\n  activeFillStyle = \"rgba(255, 0, 0,0.1)\";\n\n  ctrlStrokeStyle = \"#000\";\n\n  ctrlFillStyle = \"#fff\";\n\n  ctrlRadius = 3;\n\n  hideLabel = false;\n\n  labelFillStyle = \"#fff\";\n\n  labelFont = \"10px sans-serif\";\n\n  textFillStyle = \"#000\";\n\n  labelMaxLen = 10;\n\n  WIDTH = 0;\n\n  HEIGHT = 0;\n\n  // // // // canvas: HTMLCanvasElement;\n  canvas: fabric.Canvas;\n\n  canvasParentNode: HTMLElement;\n\n  // // // // ctx: CanvasRenderingContext2D;\n\n  dataset: Array<AllShape> = [];\n\n  // // // // offScreen: HTMLCanvasElement;\n  offScreen: fabric.Canvas;\n\n  // // // // offScreenCtx: CanvasRenderingContext2D;\n\n  remmber: number[][]; // 记录锚点距离\n\n  mouse: Point; // 记录鼠标位置\n\n  remmberOrigin: number[] = [0, 0]; // 记录背景图鼠标位移\n\n  createType = 0; // 0 不创建，1 创建矩形，2 创建多边形，3 创建点\n\n  ctrlIndex = -1;\n\n  cursor: string = \"auto\";\n\n  image: HTMLImageElement = new Image();\n\n  IMAGE_ORIGIN_WIDTH: number;\n\n  IMAGE_WIDTH = 0;\n\n  IMAGE_ORIGIN_HEIGHT = 0;\n\n  IMAGE_HEIGHT = 0;\n\n  originX = 0; // 原点x\n\n  originY = 0; // 原点y\n\n  scaleStep = 0; // 缩放步长\n\n  scrollZoom = true; // 滚动缩放\n\n  timer: NodeJS.Timer;\n\n  dblTouch = 300; // 最小touch双击时间\n\n  dblTouchStore = 0; // touch双击时间\n\n  alpha = true; // 这个选项可以帮助浏览器进行内部优化\n\n  focusMode = false; // 专注模式\n\n  evt: MouseEvent | TouchEvent | KeyboardEvent;\n\n  scaleTouchStore = 0;\n\n  isTouch2 = false;\n\n  isDragging = false;\n\n  dragStartX = 0;\n\n  dragStartY = 0;\n\n  allowPanning = false;\n\n  RemoveSelectionOnKey: string = \"Backspace\";\n\n  rectangleConnectivity: Point[] = [];\n\n  parentRectangleConnectivity: Shape = null;\n\n  childRectangleConnectivity: Shape = null;\n\n  keyRectangleConnectivity: Shape = null;\n\n  valueRectangleConnectivity: Shape = null;\n\n  hideAnnotateLabels = false;\n\n  LineWidth = 1.5;\n\n  ZoomLevel = 100; // ZoomLevel 100 is min\n\n  ScrollTop = 0;\n\n  scrollStartX = 0;\n  scrollStartY = 0;\n\n  rightClickMoveEvent: any = true;\n\n  /**\n   * @param el Valid CSS selector string, or DOM\n   * @param src image src\n   */\n  constructor(el: HTMLCanvasElement | string, src?: string) {\n    super();\n    this.handleLoad = this.handleLoad.bind(this);\n    this.handleContextmenu = this.handleContextmenu.bind(this);\n    this.handleMousewheel = this.handleMousewheel.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handelMouseMove = this.handelMouseMove.bind(this);\n    this.handelMouseUp = this.handelMouseUp.bind(this);\n    this.handelLeave = this.handelLeave.bind(this);\n    this.handelDblclick = this.handelDblclick.bind(this);\n    this.handelKeyup = this.handelKeyup.bind(this);\n    const container = typeof el === \"string\" ? document.querySelector(el) : el;\n    if (container instanceof HTMLCanvasElement) {\n      this.canvas = new fabric.Canvas(container);\n      // // // // this.canvas = container;\n      this.canvasParentNode = this.canvas.getElement()\n        .parentNode as HTMLElement;\n      // // // // this.offScreen = document.createElement(\"canvas\");\n      this.offScreen = new fabric.Canvas(document.createElement(\"canvas\"));\n      this.initSetting();\n      this.initEvents();\n      src && this.setImage(src);\n    } else {\n      console.warn(\"HTMLCanvasElement is required!\");\n    }\n  }\n\n  set setDragging(value: boolean) {\n    this.allowPanning = value;\n  }\n\n  set setRightClickMoveEvent(value: boolean) {\n    this.rightClickMoveEvent = value;\n  }\n\n  get activeShape() {\n    return this.dataset.find((x) => x.active) || ({} as any);\n  }\n\n  get scale() {\n    if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\n      return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\n    }\n    return 1;\n  }\n\n  get imageMin() {\n    return Math.min(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\n  }\n\n  get imageOriginMax() {\n    return Math.max(this.IMAGE_ORIGIN_WIDTH, this.IMAGE_ORIGIN_HEIGHT);\n  }\n\n  /**\n   * 合成事件\n   * @param e\n   * @returns\n   */\n  mergeEvent(e: TouchEvent | MouseEvent) {\n    let mouseX = 0;\n    let mouseY = 0;\n    let mouseCX = 0;\n    let mouseCY = 0;\n    let isMobile = false;\n    if (window.TouchEvent && e instanceof TouchEvent) {\n      let { clientX, clientY } = e.touches[0];\n      let target = e.target as HTMLCanvasElement;\n      const { left, top } = target.getBoundingClientRect();\n      mouseX = Math.round(clientX - left);\n      mouseY = Math.round(clientY - top);\n      if (e.touches.length === 2) {\n        let { clientX: clientX1 = 0, clientY: clientY1 = 0 } =\n          e.touches[1] || {};\n        mouseCX = Math.round(\n          Math.abs((clientX1 - clientX) / 2 + clientX) - left\n        );\n        mouseCY = Math.round(\n          Math.abs((clientY1 - clientY) / 2 + clientY) - top\n        );\n      }\n      isMobile = true;\n    } else {\n      mouseX = (e as MouseEvent).offsetX;\n      mouseY = (e as MouseEvent).offsetY;\n    }\n    return { ...e, mouseX, mouseY, mouseCX, mouseCY, isMobile };\n  }\n\n  handleLoad() {\n    this.emit(\"load\", this.image.src);\n    this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\n    this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\n    this.fitZoom();\n  }\n  /**\n  Handles the \"leave\" event triggered by a user action.\n  @param {Event} e - The event object associated with the \"leave\" event.\n  */\n  handelLeave(e: any) {\n    e.preventDefault();\n    this.isDragging = false;\n  }\n  handleScroll(e: any) {\n    this.originX = e.target.scrollLeft * -1;\n    this.originY = e.target.scrollTop * -1;\n  }\n  handleContextmenu(e: MouseEvent) {\n    e.preventDefault();\n    this.evt = e;\n    if (this.lock) return;\n  }\n  /**\n   * Handles the mousewheel event and performs zooming functionality.\n   * @param e The WheelEvent object representing the mousewheel event.\n   * @returns void\n   */\n  handleMousewheel(e: WheelEvent) {\n    // Check if the lock flag is true, scrollZoom is disabled, or the Ctrl key is not pressed, and return early\n    if (this.lock || !this.scrollZoom || !e.ctrlKey) return;\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Retrieve the mouse coordinates relative to the component using the mergeEvent function\n    const { mouseX, mouseY } = this.mergeEvent(e);\n\n    // Update the mouse coordinates in the component's state\n    this.mouse = [mouseX, mouseY];\n\n    // Set the scale based on the direction of the mousewheel scroll\n    this.setScale(e.deltaY < 0);\n  }\n  handleMouseDown(e: MouseEvent | TouchEvent) {\n    e.stopPropagation();\n    const isMobile = window.TouchEvent && e instanceof TouchEvent;\n    if (\n      this.allowPanning ||\n      (((!isMobile && (e as MouseEvent).buttons === 2 && e.which === 3) ||\n        (isMobile && e.touches.length === 1 && !this.isTouch2)) &&\n        this.rightClickMoveEvent)\n    ) {\n      this.isDragging = true;\n      this.dragStartX = (e as MouseEvent).clientX;\n      this.dragStartY = (e as MouseEvent).clientY;\n      // // // // this.scrollStartX = this.canvas.parentElement.scrollLeft;\n      // // // // this.scrollStartY = this.canvas.parentElement.scrollTop;\n      this.scrollStartX = this.canvasParentNode.scrollLeft;\n      this.scrollStartY = this.canvasParentNode.scrollTop;\n    }\n\n    this.evt = e;\n    if (this.lock) return;\n    const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\n    const offsetX = Math.round(mouseX / this.scale) + this.originX / this.scale;\n    const offsetY = Math.round(mouseY / this.scale) + this.originY / this.scale;\n    this.mouse =\n      isMobile && e.touches.length === 2\n        ? [mouseCX, mouseCY]\n        : [mouseX, mouseY];\n    this.remmberOrigin = [mouseX - this.originX, mouseY - this.originY];\n    if (\n      (!isMobile && (e as MouseEvent).buttons === 1) ||\n      (isMobile && e.touches.length === 1) ||\n      (((!isMobile && (e as MouseEvent).buttons === 2) ||\n        (isMobile && e.touches.length === 2)) &&\n        !this.rightClickMoveEvent)\n    ) {\n      // 鼠标左键\n      const ctrls = this.activeShape.ctrlsData || [];\n      this.ctrlIndex = ctrls.findIndex((coor: Point) =>\n        this.isPointInCircle(this.mouse, coor, this.ctrlRadius)\n      );\n      if (this.ctrlIndex > -1) {\n        // 点击到控制点\n        const [x0, y0] = ctrls[this.ctrlIndex];\n        this.remmber = [[offsetX - x0, offsetY - y0]];\n      } else if (this.isInBackground(e)) {\n        if (this.activeShape.creating) {\n          // 创建中\n          if ([2, 4, 6].includes(this.activeShape.type)) {\n            const [x, y] =\n              this.activeShape.coor[this.activeShape.coor.length - 1];\n            if (x !== offsetX && y !== offsetY) {\n              const nx = Math.round(offsetX - this.originX / this.scale);\n              const ny = Math.round(offsetY - this.originY / this.scale);\n              this.activeShape.coor.push([nx, ny]);\n              this.childRectangleConnectivity = null;\n              if (this.activeShape.type === 6) this.createConnectivity();\n            }\n          }\n        } else if (this.createType > 0) {\n          // 开始创建\n          let newShape;\n          const nx = Math.round(offsetX - this.originX / this.scale);\n          const ny = Math.round(offsetY - this.originY / this.scale);\n          const curPoint: Point = [nx, ny];\n          switch (this.createType) {\n            case 1:\n              newShape = new Rect(\n                { coor: [curPoint, curPoint] },\n                this.dataset.length\n              );\n              newShape.creating = true;\n              break;\n            case 2:\n              newShape = new Polygon({ coor: [curPoint] }, this.dataset.length);\n              newShape.creating = true;\n              break;\n            case 3:\n              newShape = new Dot({ coor: curPoint }, this.dataset.length);\n              this.emit(\"add\", newShape);\n              break;\n            case 4:\n              newShape = new Line({ coor: [curPoint] }, this.dataset.length);\n              newShape.creating = true;\n              break;\n            case 5:\n              newShape = new Circle({ coor: curPoint }, this.dataset.length);\n              newShape.creating = true;\n              break;\n            case 6:\n              newShape = new Connectivity(\n                { coor: [curPoint] },\n                this.dataset.length\n              );\n              newShape.creating = true;\n              this.parentRectangleConnectivity = this.findReactengle();\n              break;\n            case 7:\n              newShape = new Rect(\n                { coor: [curPoint, curPoint] },\n                this.dataset.length\n              );\n              newShape.type = this.createType;\n              newShape.creating = true;\n              this.parentRectangleConnectivity = newShape;\n              break;\n            case 8:\n              newShape = new Rect(\n                { coor: [curPoint, curPoint] },\n                this.dataset.length\n              );\n              newShape.type = this.createType;\n              newShape.creating = true;\n              break;\n            default:\n              break;\n          }\n          this.dataset.forEach((sp) => {\n            sp.active = false;\n          });\n          newShape.active = true;\n          this.dataset.push(newShape);\n        } else {\n          // 是否点击到形状\n          const [hitShapeIndex, hitShape] = this.hitOnShape(this.mouse);\n          if (hitShapeIndex > -1) {\n            this.dataset.forEach(\n              (item, i) => (item.active = i === hitShapeIndex)\n            );\n            hitShape.dragging = true;\n            this.dataset.splice(hitShapeIndex, 1);\n            this.dataset.push(hitShape);\n            this.remmber = [];\n            if ([3, 5].includes(hitShape.type)) {\n              const [x, y] = hitShape.coor;\n              this.remmber = [[offsetX - x, offsetY - y]];\n            } else {\n              hitShape.coor.forEach((pt: any) => {\n                this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\n              });\n            }\n            this.emit(\"select\", hitShape);\n          } else {\n            this.activeShape.active = false;\n            this.dataset.sort((a, b) => a.index - b.index);\n          }\n        }\n        if (!this.isDragging) {\n          this.update();\n        }\n      }\n    }\n  }\n  handelMouseMove(e: MouseEvent | TouchEvent) {\n    e.stopPropagation();\n    const isMobile = window.TouchEvent && e instanceof TouchEvent;\n    if (\n      (this.isDragging && this.allowPanning) ||\n      (((!isMobile && (e as MouseEvent).buttons === 2 && e.which === 3) ||\n        (isMobile && e.touches.length === 1 && !this.isTouch2)) &&\n        this.rightClickMoveEvent)\n    ) {\n      const deltaX = (e as MouseEvent).clientX - this.dragStartX;\n      const deltaY = (e as MouseEvent).clientY - this.dragStartY;\n      this.originX = this.scrollStartX - deltaX;\n      this.originY = this.scrollStartY - deltaY;\n\n      // // // // this.canvas.parentElement.scrollLeft = this.originX;\n      // // // // this.canvas.parentElement.scrollTop = this.originY;\n      this.canvasParentNode.scrollLeft = this.originX;\n      this.canvasParentNode.scrollTop = this.originY;\n    } else {\n      this.evt = e;\n      if (this.lock) return;\n      const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\n      const offsetX =\n        Math.round(mouseX / this.scale) + this.originX / this.scale;\n      const offsetY =\n        Math.round(mouseY / this.scale) + this.originY / this.scale;\n      this.mouse =\n        isMobile && e.touches.length === 2\n          ? [mouseCX, mouseCY]\n          : [mouseX, mouseY];\n\n      if (\n        (!isMobile && (e as MouseEvent).buttons === 1) ||\n        (isMobile && e.touches.length === 1) ||\n        (((!isMobile && (e as MouseEvent).buttons === 2) ||\n          (isMobile && e.touches.length === 2)) &&\n          !this.rightClickMoveEvent &&\n          this.activeShape.type)\n      ) {\n        if (\n          this.ctrlIndex > -1 &&\n          (this.isInBackground(e) || this.activeShape.type === 5)\n        ) {\n          const [[x, y]] = this.remmber;\n          // resize矩形\n          if ([1, 7, 8].includes(this.activeShape.type)) {\n            const [[x0, y0], [x1, y1]] = this.activeShape.coor;\n            let coor: Point[] = [];\n            switch (this.ctrlIndex) {\n              case 0:\n                coor = [\n                  [offsetX - x, offsetY - y],\n                  [x1, y1],\n                ];\n                break;\n              case 1:\n              case 7:\n              case 8:\n                coor = [\n                  [x0, offsetY - y],\n                  [x1, y1],\n                ];\n                break;\n              case 2:\n                coor = [\n                  [x0, offsetY - y],\n                  [offsetX - x, y1],\n                ];\n                break;\n              case 3:\n                coor = [\n                  [x0, y0],\n                  [offsetX - x, y1],\n                ];\n                break;\n              case 4:\n                coor = [\n                  [x0, y0],\n                  [offsetX - x, offsetY - y],\n                ];\n                break;\n              case 5:\n                coor = [\n                  [x0, y0],\n                  [x1, offsetY - y],\n                ];\n                break;\n              case 6:\n                coor = [\n                  [offsetX - x, y0],\n                  [x1, offsetY - y],\n                ];\n                break;\n              default:\n                break;\n            }\n            const [[a0, b0], [a1, b1]] = coor;\n            if (a1 - a0 >= this.MIN_WIDTH && b1 - b0 >= this.MIN_HEIGHT) {\n              this.activeShape.coor = coor;\n            } else {\n              this.emit(\n                \"warn\",\n                `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than${this.MIN_HEIGHT}。`\n              );\n            }\n          } else if ([2, 4, 6].includes(this.activeShape.type)) {\n            const nx = Math.round(offsetX - this.originX / this.scale);\n            const ny = Math.round(offsetY - this.originY / this.scale);\n            const newPoint = [nx, ny];\n            this.activeShape.coor.splice(this.ctrlIndex, 1, newPoint);\n          } else if (this.activeShape.type === 5) {\n            const nx = Math.round(offsetX - this.originX / this.scale);\n            const newRadius = nx - this.activeShape.coor[0];\n            if (newRadius >= this.MIN_RADIUS)\n              this.activeShape.radius = newRadius;\n          }\n        } else if (this.activeShape.dragging) {\n          // 拖拽\n          let coor = [];\n          let noLimit = true;\n          const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\n          const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\n          if ([3, 5].includes(this.activeShape.type)) {\n            const [t1, t2] = this.remmber[0];\n            const x = offsetX - t1;\n            const y = offsetY - t2;\n            if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\n            coor = [x, y];\n          } else {\n            for (let i = 0; i < this.activeShape.coor.length; i++) {\n              const tar = this.remmber[i];\n              const x = offsetX - tar[0];\n              const y = offsetY - tar[1];\n              if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\n              coor.push([x, y]);\n            }\n          }\n          if (noLimit) this.activeShape.coor = coor;\n        } else if (this.activeShape.creating && this.isInBackground(e)) {\n          const x = Math.round(offsetX - this.originX / this.scale);\n          const y = Math.round(offsetY - this.originY / this.scale);\n          // 创建矩形\n          if (this.activeShape.type === 1) {\n            this.activeShape.coor.splice(1, 1, [x, y]);\n          } else if (this.activeShape.type === 5) {\n            const [x0, y0] = this.activeShape.coor;\n            const r = Math.sqrt((x0 - x) ** 2 + (y0 - y) ** 2);\n            this.activeShape.radius = r;\n          } else if (\n            this.activeShape.type === 7 ||\n            this.activeShape.type === 8\n          ) {\n            this.activeShape.coor.splice(1, 1, [x, y]);\n          }\n        }\n        this.update();\n      } else if (\n        [2, 4, 6].includes(this.activeShape.type) &&\n        this.activeShape.creating\n      ) {\n        // 多边形添加点\n        this.update();\n      } else if (\n        (!isMobile && (e as MouseEvent).buttons === 2 && e.which === 3) ||\n        (isMobile && e.touches.length === 1 && !this.isTouch2)\n      ) {\n        // 拖动背景\n        // this.originX = Math.round(mouseX - this.remmberOrigin[0]);\n        // this.originY = Math.round(mouseY - this.remmberOrigin[1]);\n        // this.update();\n      } else if (isMobile && e.touches.length === 2) {\n        this.isTouch2 = true;\n        const touch0 = e.touches[0];\n        const touch1 = e.touches[1];\n        const cur = this.scaleTouchStore;\n        this.scaleTouchStore = Math.abs(\n          (touch1.clientX - touch0.clientX) * (touch1.clientY - touch0.clientY)\n        );\n        this.setScale(this.scaleTouchStore > cur, true);\n      }\n    }\n  }\n  handelMouseUp(e: MouseEvent | TouchEvent) {\n    e.stopPropagation();\n    // Temp Code\n    if (this.allowPanning) {\n      this.isDragging = false;\n    }\n\n    this.evt = e;\n    if (this.lock) return;\n    if (window.TouchEvent && e instanceof TouchEvent) {\n      if (e.touches.length === 0) {\n        this.isTouch2 = false;\n      }\n      if (Date.now() - this.dblTouchStore < this.dblTouch) {\n        this.handelDblclick(e);\n        return;\n      }\n      this.dblTouchStore = Date.now();\n    }\n    this.remmber = [];\n    if (this.activeShape.type) {\n      this.activeShape.dragging = false;\n      if (this.activeShape.creating) {\n        if (this.activeShape.type === 1) {\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\n          if (\n            Math.abs(x0 - x1) < this.MIN_WIDTH ||\n            Math.abs(y0 - y1) < this.MIN_HEIGHT\n          ) {\n            this.dataset.pop();\n            this.emit(\n              \"warn\",\n              `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than ${this.MIN_HEIGHT}`\n            );\n          } else {\n            this.activeShape.coor = [\n              [Math.min(x0, x1), Math.min(y0, y1)],\n              [Math.max(x0, x1), Math.max(y0, y1)],\n            ];\n            this.activeShape.creating = false;\n            this.emit(\"add\", this.activeShape);\n          }\n        } else if (this.activeShape.type === 5) {\n          if (this.activeShape.radius < this.MIN_RADIUS) {\n            this.dataset.pop();\n            this.emit(\"warn\", `Radius cannot be less than ${this.MIN_WIDTH}`);\n          } else {\n            this.activeShape.creating = false;\n            this.emit(\"add\", this.activeShape);\n          }\n        } else if (this.activeShape.type === 7 || this.activeShape.type === 8) {\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\n          if (\n            Math.abs(x0 - x1) < this.MIN_WIDTH ||\n            Math.abs(y0 - y1) < this.MIN_HEIGHT\n          ) {\n            this.dataset.pop();\n            this.emit(\n              \"warn\",\n              `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than ${this.MIN_HEIGHT}`\n            );\n          } else {\n            this.activeShape.coor = [\n              [Math.min(x0, x1), Math.min(y0, y1)],\n              [Math.max(x0, x1), Math.max(y0, y1)],\n            ];\n            this.activeShape.creating = false;\n            this.emit(\"add\", this.activeShape);\n          }\n\n          if (this.activeShape.type === 7) {\n            this.childRectangleConnectivity = {\n              ...this.valueRectangleConnectivity,\n            };\n            if (\n              this.valueRectangleConnectivity &&\n              this.valueRectangleConnectivity.type === 8\n            )\n              this.keyValueConnectivity(e);\n          }\n          if (this.activeShape.type === 8) {\n            this.parentRectangleConnectivity = {\n              ...this.keyRectangleConnectivity,\n            };\n            if (\n              this.keyRectangleConnectivity &&\n              this.keyRectangleConnectivity.type === 7\n            )\n              this.keyValueConnectivity(e);\n          }\n        }\n        this.update();\n      }\n      if (\n        [1, 7, 8].includes(this.activeShape.type) &&\n        this.activeShape.active\n      ) {\n        if (this.activeShape.previousCoor?.length > 0) {\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\n          const [[a0, b0], [a1, b1]] = this.activeShape.previousCoor;\n\n          if (\n            Math.abs(x1 - x0) === Math.abs(a1 - a0) &&\n            Math.abs(y1 - y0) === Math.abs(b1 - b0)\n          ) {\n            return;\n          }\n        }\n        this.activeShape.previousCoor = this.activeShape.coor;\n        this.emit(\"updatedRect\", this.activeShape);\n      }\n    }\n\n    // END\n  }\n  handelDblclick(e: MouseEvent | TouchEvent) {\n    e.stopPropagation();\n    this.evt = e;\n    if (this.lock) return;\n    if ([2, 4].includes(this.activeShape.type)) {\n      if (\n        (this.activeShape.type === 2 && this.activeShape.coor.length > 2) ||\n        (this.activeShape.type === 4 && this.activeShape.coor.length > 1)\n      ) {\n        this.emit(\"add\", this.activeShape);\n        this.activeShape.creating = false;\n        this.update();\n      }\n    }\n  }\n  handelKeyup(e: KeyboardEvent) {\n    e.stopPropagation();\n    this.evt = e;\n    if (this.lock || document.activeElement !== document.body) return;\n    if (this.activeShape.type) {\n      if ([2, 4, 6].includes(this.activeShape.type) && e.key === \"Escape\") {\n        if (this.activeShape.coor.length > 1 && this.activeShape.creating) {\n          this.activeShape.coor.pop();\n        } else {\n          this.deleteByIndex(this.activeShape.index);\n        }\n        this.update();\n      } else if (e.key === this.RemoveSelectionOnKey) {\n        this.deleteByIndex(this.activeShape.index);\n      }\n    }\n  }\n\n  private keyValueConnectivity(e: MouseEvent | TouchEvent) {\n    this.valueRectangleConnectivity = null;\n    this.keyRectangleConnectivity = null;\n    if (!this.activeShape.creating) {\n      const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\n      const offsetX =\n        Math.round(mouseX / this.scale) + this.originX / this.scale;\n      const offsetY =\n        Math.round(mouseY / this.scale) + this.originY / this.scale;\n      const nx = Math.round(offsetX - this.originX / this.scale);\n      const ny = Math.round(offsetY - this.originY / this.scale);\n      const curPoint: Point = [nx, ny];\n      let newShape = new Connectivity(\n        { coor: [curPoint] },\n        this.dataset.length\n      );\n      newShape.creating = true;\n\n      this.dataset.forEach((sp) => {\n        sp.active = false;\n      });\n      newShape.active = true;\n      this.dataset.push(newShape);\n\n      this.createConnectivity();\n    }\n  }\n\n  /**\n   * Find reactangle for connectivity between the rectangle\n   */\n  private findReactengle(): Rect {\n    for (let i = this.dataset.length - 1; i > -1; i--) {\n      const shape = this.dataset[i];\n      const [x, y] = this.mouse;\n      if (shape.type === 1) {\n        const [[x0, y0], [x1, y1]] = (shape as Rect).coor.map((a) =>\n          a.map((b: any) => b * this.scale)\n        );\n        // // // // if (\n        // // // //   x0 + this.originX + this.canvas.parentElement.scrollLeft - 5 <= x &&\n        // // // //   x <= x1 + this.originX + this.canvas.parentElement.scrollLeft + 5 &&\n        // // // //   y0 + this.originY + this.canvas.parentElement.scrollTop - 5 <= y &&\n        // // // //   y <= y1 + this.originY + this.canvas.parentElement.scrollTop + 5\n        // // // // ) {\n        // // // //   return shape as Rect;\n        // // // // }\n        if (\n          x0 + this.originX + this.canvasParentNode.scrollLeft - 5 <= x &&\n          x <= x1 + this.originX + this.canvasParentNode.scrollLeft + 5 &&\n          y0 + this.originY + this.canvasParentNode.scrollTop - 5 <= y &&\n          y <= y1 + this.originY + this.canvasParentNode.scrollTop + 5\n        ) {\n          return shape as Rect;\n        }\n      }\n    }\n  }\n\n  /**\n  Creates connectivity between rectangles in a graphical application.\n  The method is specific to the context of an object or class it belongs to.\n  */\n  private createConnectivity() {\n    // Check if the active shape is not of type 6 (a specific type)\n    if (this.activeShape.type !== 6) {\n      this.update();\n      return;\n    }\n\n    // Emit an \"add\" event with the active shape\n    this.emit(\"add\", this.activeShape);\n\n    // Set the 'creating' flag of the active shape to false\n    this.activeShape.creating = false;\n\n    // Find the child rectangle connectivity by invoking 'findReactengle' method\n    if (this.activeShape.type === 6 && !this.childRectangleConnectivity)\n      this.childRectangleConnectivity = this.findReactengle();\n\n    // Check if both parent and child rectangle connectivity exist and have different indices\n    if (\n      this.parentRectangleConnectivity &&\n      this.childRectangleConnectivity &&\n      this.parentRectangleConnectivity.index !==\n        this.childRectangleConnectivity.index\n    ) {\n      // Push the indices of parent and child rectangle connectivity to the rectangleConnectivity array\n      this.rectangleConnectivity.push([\n        this.parentRectangleConnectivity.index,\n        this.childRectangleConnectivity.index,\n      ]);\n\n      // Check if the parent and child rectangle connectivity are not already present in the lineCoorIndex array\n      if (\n        !this.isArrayInArray(\n          this.parentRectangleConnectivity.rectangleConnectivity,\n          this.childRectangleConnectivity.rectangleConnectivity,\n          this.rectangleConnectivity[0]\n        )\n      ) {\n        // Push the active shape's index to the lineCoorIndex arrays of both parent and child rectangle connectivity\n        this.parentRectangleConnectivity.lineCoorIndex.push(\n          this.activeShape.index\n        );\n        this.childRectangleConnectivity.lineCoorIndex.push(\n          this.activeShape.index\n        );\n\n        // Push the rectangle connectivity between parent and child to the rectangleConnectivity arrays of both rectangles\n        this.activeShape.rectangleConnectivity.push([\n          this.parentRectangleConnectivity.index,\n          this.childRectangleConnectivity.index,\n        ]);\n        this.parentRectangleConnectivity.rectangleConnectivity.push([\n          this.parentRectangleConnectivity.index,\n          this.childRectangleConnectivity.index,\n        ]);\n        this.childRectangleConnectivity.rectangleConnectivity.push([\n          this.parentRectangleConnectivity.index,\n          this.childRectangleConnectivity.index,\n        ]);\n      } else {\n        // If the connectivity already exists, find the index of the active shape in the dataset\n        const num = this.dataset.findIndex(\n          (x) => x.index === this.activeShape.index\n        );\n        if (num > -1) {\n          // Emit a \"delete\" event for the corresponding dataset entry and remove it from the dataset\n          this.emit(\"delete\", this.dataset[num]);\n          this.dataset.splice(num, 1);\n        }\n      }\n\n      // Reset the rectangleConnectivity array\n      this.rectangleConnectivity = [];\n    } else {\n      // If either the parent or child rectangle connectivity is missing or they have the same index\n      const num = this.dataset.findIndex(\n        (x) => x.index === this.activeShape.index\n      );\n      if (num > -1) {\n        // Emit a \"delete\" event for the corresponding dataset entry and remove it from the dataset\n        this.emit(\"delete\", this.dataset[num]);\n        this.dataset.splice(num, 1);\n      }\n    }\n\n    // Perform an update\n    this.update();\n  }\n\n  /**\n\n  Checks if a given array is contained within another array, considering specific element comparisons.\n  @param {any[]} parentArr - The parent array to be checked.\n  @param {any[]} childArr - The child array to be checked.\n  @param {any[]} comp - The array to be compared for existence within the parent and child arrays.\n  @returns {boolean} Returns true if the comp array is found within either the parent or child arrays, false otherwise.\n  */\n  private isArrayInArray(parentArr: any, childArr: any, comp: any) {\n    // Check if both parent and child arrays are empty\n    if (!parentArr.length && !childArr.length) {\n      return false;\n    }\n\n    // Extract the values from the comp array\n    const [x1, y1] = comp;\n\n    // Check if the comp array exists in the parent array\n    const parentCheck = parentArr.some(\n      ([e1, e2]: [number, number]) =>\n        (e1 === x1 || e1 === y1) && (e2 === x1 || e2 === y1)\n    );\n\n    // Check if the comp array exists in the child array\n    const childCheck = childArr.some(\n      ([e1, e2]: [number, number]) =>\n        (e1 === x1 || e1 === y1) && (e2 === x1 || e2 === y1)\n    );\n\n    // Return true if the comp array is found in either the parent or child arrays\n    return parentCheck || childCheck;\n  }\n\n  private getDomRect(coor: Point[]) {\n    const [x1, y1] = coor[0];\n    const [x2, y2] = coor[1];\n    return { x: x1, y: y1, width: x2 - x1, height: y2 - y1 };\n  }\n\n  private drawShortestLine(\n    rect1: DOMRect,\n    rect2: DOMRect,\n    shape: Line | Connectivity\n  ) {\n    const closestMidpoints = this.getClosestMidpoints(rect1, rect2);\n\n    shape.coor[0] = [closestMidpoints[0].x, closestMidpoints[0].y];\n    shape.coor[1] = [closestMidpoints[1].x, closestMidpoints[1].y];\n\n    this.drawLine(shape as Line | Connectivity);\n\n    // this.parentRectangleConnectivity = this.childRectangleConnectivity = null;\n    // this.ctx.beginPath();\n    // this.ctx.moveTo(\n    //   closestMidpoints[0].x * this.scale,\n    //   closestMidpoints[0].y * this.scale\n    // );\n    // this.ctx.lineTo(\n    //   closestMidpoints[1].x * this.scale,\n    //   closestMidpoints[1].y * this.scale\n    // );\n    // this.ctx.strokeStyle = \"#ba3f3f\";\n    // this.ctx.stroke();\n  }\n\n  private getClosestMidpoints(rect1: DOMRect, rect2: DOMRect): Point2[] {\n    const midpoints1 = this.getMidpoints(rect1);\n    const midpoints2 = this.getMidpoints(rect2);\n    let closestDistance = Infinity;\n    let closestMidpoints: Point2[] = [];\n    for (let i = 0; i < midpoints1.length; i++) {\n      for (let j = 0; j < midpoints2.length; j++) {\n        const distance = this.getDistance(midpoints1[i], midpoints2[j]);\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestMidpoints = [midpoints1[i], midpoints2[j]];\n        }\n      }\n    }\n    return closestMidpoints;\n  }\n\n  private getMidpoints(rect: DOMRect): Point2[] {\n    const { x, y, width, height } = rect;\n    const midX = x + width / 2;\n    const midY = y + height / 2;\n    return [\n      { x, y: midY },\n      { x: x + width, y: midY },\n      { x: midX, y },\n      { x: midX, y: y + height },\n    ];\n  }\n\n  private getDistance(point1: Point2, point2: Point2): number {\n    const dx = point2.x - point1.x;\n    const dy = point2.y - point1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * 初始化配置\n   */\n  initSetting() {\n    const dpr = window.devicePixelRatio || 1;\n    // // // // this.canvas.style.userSelect = \"none\";\n    this.canvas.getElement().style.userSelect = \"none\";\n    // // // // this.ctx = this.ctx || this.canvas.getContext(\"2d\", { alpha: this.alpha });\n    // // // // this.WIDTH = this.canvas.clientWidth;\n    // // // // this.HEIGHT = this.canvas.clientHeight;\n    this.WIDTH = this.canvas.getElement().clientWidth;\n    this.HEIGHT = this.canvas.getElement().clientHeight;\n    this.canvas.width = this.WIDTH * dpr;\n    this.canvas.height = this.HEIGHT * dpr;\n    // // // // this.canvas.style.width = this.WIDTH + \"px\";\n    // // // // this.canvas.style.height = this.HEIGHT + \"px\";\n    this.canvas.getElement().style.width = this.WIDTH + \"px\";\n    this.canvas.getElement().style.height = this.HEIGHT + \"px\";\n    this.offScreen.width = this.WIDTH;\n    this.offScreen.height = this.HEIGHT;\n    // // // // this.offScreenCtx =\n    // // // //   this.offScreenCtx ||\n    // // // //   this.offScreen.getContext(\"2d\", { willReadFrequently: true });\n    // // // // this.ctx.scale(dpr, dpr);\n  }\n  /**\n   * 初始化事件\n   */\n  initEvents() {\n    this.image.addEventListener(\"load\", this.handleLoad);\n    // // // // this.canvas.addEventListener(\"touchstart\", this.handleMouseDown);\n    // // // // this.canvas.addEventListener(\"touchmove\", this.handelMouseMove);\n    // // // // this.canvas.addEventListener(\"touchend\", this.handelMouseUp);\n    // // // // this.canvas.addEventListener(\"contextmenu\", this.handleContextmenu);\n    // // // // this.canvas.addEventListener(\"mousewheel\", this.handleMousewheel);\n    // // // // this.canvas.addEventListener(\"wheel\", this.handleMousewheel);\n    // // // // this.canvas.addEventListener(\"mousedown\", this.handleMouseDown);\n    // // // // this.canvas.addEventListener(\"mousemove\", this.handelMouseMove);\n    // // // // this.canvas.addEventListener(\"mouseup\", this.handelMouseUp);\n    // // // // this.canvas.addEventListener(\"mouseleave\", this.handelLeave);\n    // // // // this.canvas.addEventListener(\"dblclick\", this.handelDblclick);\n    // // // // document.body.addEventListener(\"keyup\", this.handelKeyup);\n    this.canvas.on(\"touchstart\", this.handleMouseDown as any);\n    this.canvas.on(\"touchmove\", this.handelMouseMove as any);\n    this.canvas.on(\"touchend\", this.handelMouseUp as any);\n    this.canvas.on(\"contextmenu\", this.handleContextmenu as any);\n    this.canvas.on(\"mousewheel\", this.handleMousewheel as any);\n    this.canvas.on(\"wheel\", this.handleMousewheel as any);\n    this.canvas.on(\"mousedown\", this.handleMouseDown as any);\n    this.canvas.on(\"mousemove\", this.handelMouseMove as any);\n    this.canvas.on(\"mouseup\", this.handelMouseUp as any);\n    this.canvas.on(\"mouseleave\", this.handelLeave);\n    this.canvas.on(\"dblclick\", this.handelDblclick as any);\n    document.body.addEventListener(\"keyup\", this.handelKeyup);\n    // // // // this.canvas.parentElement.addEventListener(\"scroll\", this.handleScroll);\n    this.canvasParentNode.addEventListener(\"scroll\", this.handleScroll);\n  }\n  /**\n   * 添加/切换图片\n   * @param url 图片链接\n   */\n  setImage(url: string) {\n    this.image.src = url;\n  }\n  /**\n   * 设置数据\n   * @param data Array\n   */\n  setData(data: AllShape[]) {\n    setTimeout(() => {\n      let initdata: AllShape[] = [];\n      data.forEach((item, index) => {\n        if (Object.prototype.toString.call(item).indexOf(\"Object\") > -1) {\n          let shape: AllShape;\n          switch (item.type) {\n            case 1:\n              shape = new Rect(item, index);\n              break;\n            case 2:\n              shape = new Polygon(item, index);\n              break;\n            case 3:\n              shape = new Dot(item, index);\n              break;\n            case 4:\n              shape = new Line(item, index);\n              break;\n            case 5:\n              shape = new Circle(item, index);\n              break;\n            case 6:\n              shape = new Connectivity(item, index);\n              break;\n            case 7:\n            case 8:\n              shape = new Rect(item, index);\n              shape.type = item.type;\n              break;\n            default:\n              console.warn(\"Invalid shape\", item);\n              break;\n          }\n          [1, 2, 3, 4, 5, 6, 7, 8].includes(item.type) && initdata.push(shape);\n        } else {\n          console.warn(\"Shape must be an enumerable Object.\", item);\n        }\n      });\n      this.dataset = initdata;\n      this.update();\n    });\n  }\n  /**\n   * 判断是否在标注实例上\n   * @param mousePoint 点击位置\n   * @returns\n   */\n  hitOnShape(mousePoint: Point): [number, AllShape] {\n    let hitShapeIndex = -1;\n    let hitShape: AllShape;\n    for (let i = this.dataset.length - 1; i > -1; i--) {\n      const shape = this.dataset[i];\n      if (\n        (shape.type === 3 &&\n          this.isPointInCircle(\n            mousePoint,\n            shape.coor as Point,\n            this.ctrlRadius\n          )) ||\n        (shape.type === 5 &&\n          this.isPointInCircle(\n            mousePoint,\n            shape.coor as Point,\n            (shape as Circle).radius * this.scale\n          )) ||\n        (shape.type === 1 &&\n          this.isPointInRect(mousePoint, (shape as Rect).coor)) ||\n        (shape.type === 2 &&\n          this.isPointInPolygon(mousePoint, (shape as Polygon).coor)) ||\n        ((shape.type === 4 || shape.type === 6) &&\n          this.isPointInLine(\n            mousePoint,\n            (shape as Line | Connectivity).coor\n          )) ||\n        (shape.type === 7 &&\n          this.isPointInRect(mousePoint, (shape as Rect).coor)) ||\n        (shape.type === 8 &&\n          this.isPointInRect(mousePoint, (shape as Rect).coor))\n      ) {\n        // if (this.focusMode && !shape.active) continue;\n        hitShapeIndex = i;\n        hitShape = shape;\n        break;\n      }\n    }\n    return [hitShapeIndex, hitShape];\n  }\n\n  /**\n   * 判断鼠标是否在背景图内部\n   * @param e MouseEvent\n   * @returns 布尔值\n   */\n  isInBackground(e: MouseEvent | TouchEvent): boolean {\n    const { mouseX, mouseY } = this.mergeEvent(e);\n\n    // // // // return (\n    // // // //   mouseX >= this.originX + this.canvas.parentElement.scrollLeft &&\n    // // // //   mouseY >= this.originY + this.canvas.parentElement.scrollTop &&\n    // // // //   mouseX <=\n    // // // //     this.originX +\n    // // // //       this.IMAGE_ORIGIN_WIDTH * this.scale +\n    // // // //       this.canvas.parentElement.scrollLeft &&\n    // // // //   mouseY <=\n    // // // //     this.originY +\n    // // // //       this.IMAGE_ORIGIN_HEIGHT * this.scale +\n    // // // //       this.canvas.parentElement.scrollTop\n    // // // // );\n    return (\n      mouseX >= this.originX + this.canvasParentNode.scrollLeft &&\n      mouseY >= this.originY + this.canvasParentNode.scrollTop &&\n      mouseX <=\n        this.originX +\n          this.IMAGE_ORIGIN_WIDTH * this.scale +\n          this.canvasParentNode.scrollLeft &&\n      mouseY <=\n        this.originY +\n          this.IMAGE_ORIGIN_HEIGHT * this.scale +\n          this.canvasParentNode.scrollTop\n    );\n  }\n  /**\n   * 判断是否在矩形内\n   * @param point 坐标\n   * @param coor 区域坐标\n   * @returns 布尔值\n   */\n  isPointInRect(point: Point, coor: Point[]): boolean {\n    const [x, y] = point;\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n  /**\n   * 判断是否在多边形内\n   * @param point 坐标\n   * @param coor 区域坐标\n   * @returns 布尔值\n   */\n  isPointInPolygon(point: Point, coor: Point[]): boolean {\n    // // // // this.offScreenCtx.save();\n    // // // // this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n    // // // // this.offScreenCtx.translate(this.originX, this.originY);\n    // // // // this.offScreenCtx.beginPath();\n    // // // // coor.forEach((pt, i) => {\n    // // // //   const [x, y] = pt.map((a) => Math.round(a * this.scale));\n    // // // //   if (i === 0) {\n    // // // //     this.offScreenCtx.moveTo(x, y);\n    // // // //   } else {\n    // // // //     this.offScreenCtx.lineTo(x, y);\n    // // // //   }\n    // // // // });\n    // // // // this.offScreenCtx.closePath();\n    // // // // this.offScreenCtx.fill();\n    // // // // const areaData = this.offScreenCtx.getImageData(\n    // // // //   0,\n    // // // //   0,\n    // // // //   this.WIDTH,\n    // // // //   this.HEIGHT\n    // // // // );\n    // // // // const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\n    // // // // this.offScreenCtx.restore();\n    // // // // return areaData.data[index + 3] !== 0;\n    return false;\n  }\n  /**\n   * 判断是否在圆内\n   * @param point 坐标\n   * @param center 圆心\n   * @param r 半径\n   * @param needScale 是否为圆形点击检测\n   * @returns 布尔值\n   */\n  isPointInCircle(point: Point, center: Point, r: number): boolean {\n    const [x, y] = point;\n    const [x0, y0] = center.map((a) => a * this.scale);\n    // // // // const distance = Math.sqrt(\n    // // // //   (x0 + (this.originX + this.canvas.parentElement.scrollLeft) - x) ** 2 +\n    // // // //     (y0 + (this.originY + this.canvas.parentElement.scrollTop) - y) ** 2\n    // // // // );\n    const distance = Math.sqrt(\n      (x0 + (this.originX + this.canvasParentNode.scrollLeft) - x) ** 2 +\n        (y0 + (this.originY + this.canvasParentNode.scrollTop) - y) ** 2\n    );\n    return distance <= r;\n  }\n\n  /**\n   * 判断是否在折线内\n   * @param point 坐标\n   * @param coor 区域坐标\n   * @returns 布尔值\n   */\n  isPointInLine(point: Point, coor: Point[]): boolean {\n    if (coor.length === 2) {\n      let [x1, y1] = coor[0];\n      let [x2, y2] = coor[1];\n      x1 *= this.scale;\n      x2 *= this.scale;\n      y1 *= this.scale;\n      y2 *= this.scale;\n      let [x, y] = point;\n      return this.isPointOnLine(x, y, x1, y1, x2, y2);\n    }\n  }\n\n  /**\n\nChecks if a given point lies on a line segment defined by two points.\n@param {number} x - The x-coordinate of the point to be checked.\n@param {number} y - The y-coordinate of the point to be checked.\n@param {number} x1 - The x-coordinate of the first point defining the line segment.\n@param {number} y1 - The y-coordinate of the first point defining the line segment.\n@param {number} x2 - The x-coordinate of the second point defining the line segment.\n@param {number} y2 - The y-coordinate of the second point defining the line segment.\n@returns {boolean} Returns true if the point lies on the line segment, false otherwise.\n*/\n  isPointOnLine(x: any, y: any, x1: any, y1: any, x2: any, y2: any) {\n    // Calculate a buffer to add a small margin of error\n    const buffer = 5 / Math.max(this.scale, 1);\n    // Call the circleLineIntersect method to check if the point lies on the line segment\n    return this.circleLineIntersect(x1, y1, x2, y2, x, y, buffer);\n  }\n\n  /**\n\nDetermines if a given circle intersects with a line segment defined by two points.\n@param {number} x1 - The x-coordinate of the first point defining the line segment.\n@param {number} y1 - The y-coordinate of the first point defining the line segment.\n@param {number} x2 - The x-coordinate of the second point defining the line segment.\n@param {number} y2 - The y-coordinate of the second point defining the line segment.\n@param {number} cx - The x-coordinate of the center of the circle.\n@param {number} cy - The y-coordinate of the center of the circle.\n@param {number} r - The radius of the circle.\n@returns {boolean} Returns true if the circle intersects with the line segment, false otherwise.\n*/\n  circleLineIntersect(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    cx: number,\n    cy: number,\n    r: number\n  ): boolean {\n    // Calculate the vector components of the line segment\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    // Calculate the squared length of the line segment\n    const len2 = dx * dx + dy * dy;\n    // Calculate the parameter 'u' to determine the closest point on the line segment to the circle's center\n    const u = ((cx - x1) * dx + (cy - y1) * dy) / len2;\n\n    // If 'u' is outside the range [0, 1], the closest point is outside the line segment\n    if (u < 0 || u > 1) {\n      return false;\n    }\n\n    // Calculate the coordinates of the closest point on the line segment to the circle's center\n    const closestX = x1 + u * dx;\n    const closestY = y1 + u * dy;\n    // Calculate the squared distance between the closest point and the circle's center\n    const dist = (closestX - cx) ** 2 + (closestY - cy) ** 2;\n    // Check if the squared distance is less than or equal to the squared radius\n    return dist <= r;\n  }\n\n  /**\n   * 绘制矩形\n   * @param shape 标注实例\n   * @returns\n   */\n  drawRect(shape: Rect) {\n    if (shape.coor.length !== 2) return;\n    const { strokeStyle, fillStyle, active, creating, coor } = shape;\n    const [[x0, y0], [x1, y1]] = coor.map((a: Point) =>\n      a.map((b) => Math.round(b * this.scale))\n    );\n\n    // // // // this.ctx.save();\n    // // // // this.ctx.fillStyle = fillStyle || this.fillStyle;\n    // // // // this.ctx.strokeStyle =\n    // // // //   active || creating\n    // // // //     ? this.activeStrokeStyle\n    // // // //     : strokeStyle || this.strokeStyle;\n    const w = x1 - x0;\n    const h = y1 - y0;\n    // // // // this.ctx.lineWidth = this.LineWidth;\n    // // // // this.ctx.strokeRect(x0, y0, w, h);\n    // // // // if (!creating) this.ctx.fillRect(x0, y0, w, h);\n\n    const rect = new fabric.Rect({\n      left: x0, // x-coordinate\n      top: y0, // y-coordinate\n      width: w,\n      height: h,\n      fill: fillStyle || this.fillStyle,\n      stroke:\n        active || creating\n          ? this.activeStrokeStyle\n          : strokeStyle || this.strokeStyle,\n      strokeWidth: this.LineWidth,\n    });\n    // // // // this.ctx.restore();\n    this.canvas.add(rect);\n    this.canvas.renderAll();\n    if (!this.hideAnnotateLabels) this.drawLabel(coor[0], shape);\n  }\n  /**\n   * 绘制多边形\n   * @param shape 标注实例\n   */\n  drawPolygon(shape: Polygon) {\n    const { strokeStyle, fillStyle, active, creating, coor } = shape;\n    // // // // this.ctx.save();\n    // // // // this.ctx.fillStyle = fillStyle || this.fillStyle;\n    // // // // this.ctx.strokeStyle =\n    // // // //   active || creating\n    // // // //     ? this.activeStrokeStyle\n    // // // //     : strokeStyle || this.strokeStyle;\n    // // // // this.ctx.beginPath();\n    // // // // coor.forEach((el: Point, i) => {\n    // // // //   const [x, y] = el.map((a) => Math.round(a * this.scale));\n    // // // //   if (i === 0) {\n    // // // //     this.ctx.moveTo(x, y);\n    // // // //   } else {\n    // // // //     this.ctx.lineTo(x, y);\n    // // // //   }\n    // // // // });\n    // // // // if (creating) {\n    // // // //   const [x, y] = this.mouse || [];\n    // // // //   this.ctx.lineTo(x - this.originX, y - this.originY);\n    // // // // } else if (coor.length > 2) {\n    // // // //   this.ctx.closePath();\n    // // // // }\n    // // // // this.ctx.fill();\n    // // // // this.ctx.stroke();\n    // // // // this.ctx.restore();\n    if (!this.hideAnnotateLabels) this.drawLabel(coor[0], shape);\n  }\n  /**\n   * 绘制点\n   * @param shape 标注实例\n   */\n  drawDot(shape: Dot) {\n    const { strokeStyle, fillStyle, active, coor } = shape;\n    const [x, y] = coor.map((a) => a * this.scale);\n    const dot = new fabric.Circle({\n      left: x,\n      top: y,\n      radius: this.ctrlRadius, // Adjust the dot size as needed\n      fill: fillStyle || this.ctrlFillStyle, // Dot color,\n      stroke: active ? this.activeStrokeStyle : strokeStyle || this.strokeStyle,\n    });\n    this.canvas.add(dot);\n    this.canvas.renderAll();\n    // // // // this.ctx.save();\n    // // // // this.ctx.fillStyle = fillStyle || this.ctrlFillStyle;\n    // // // // this.ctx.strokeStyle = active\n    // // // //   ? this.activeStrokeStyle\n    // // // //   : strokeStyle || this.strokeStyle;\n    // // // // this.ctx.beginPath();\n    // // // // this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n    // // // // this.ctx.fill();\n    // // // // this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n    // // // // this.ctx.stroke();\n    // // // // this.ctx.restore();\n    if (!this.hideAnnotateLabels) this.drawLabel(coor as Point, shape);\n  }\n  /**\n   * 绘制圆\n   * @param shape 标注实例\n   */\n  drawCirle(shape: Circle) {\n    const {\n      strokeStyle,\n      fillStyle,\n      active,\n      coor,\n      label,\n      creating,\n      radius,\n      ctrlsData,\n    } = shape;\n    const [x, y] = coor.map((a) => a * this.scale);\n\n    const cirle = new fabric.Circle({\n      left: x,\n      top: y,\n      radius: radius * this.scale, // Adjust the dot size as needed\n      fill: fillStyle || this.ctrlFillStyle, // Dot color,\n      stroke: active ? this.activeStrokeStyle : strokeStyle || this.strokeStyle,\n    });\n    this.canvas.add(cirle);\n    this.canvas.renderAll();\n\n    // // // // this.ctx.save();\n    // // // // this.ctx.fillStyle = fillStyle || this.fillStyle;\n    // // // // this.ctx.strokeStyle =\n    // // // //   active || creating\n    // // // //     ? this.activeStrokeStyle\n    // // // //     : strokeStyle || this.strokeStyle;\n    // // // // this.ctx.beginPath();\n    // // // // this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\n    // // // // this.ctx.fill();\n    // // // // this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\n    // // // // this.ctx.stroke();\n    // // // // this.ctx.restore();\n    if (!this.hideAnnotateLabels) this.drawLabel(ctrlsData[0] as Point, shape);\n  }\n  /**\n   * 绘制折线\n   * @param shape 标注实例\n   */\n  drawLine(shape: Line | Connectivity) {\n    const { strokeStyle, active, creating, coor } = shape;\n    let startPoint: fabric.Point;\n    let endPoint: fabric.Point;\n    let line: fabric.Line;\n    // // // // this.ctx.save();\n    // // // // this.ctx.lineWidth = this.LineWidth;\n    // // // // this.ctx.strokeStyle =\n    // // // //   active || creating\n    // // // //     ? this.activeStrokeStyle\n    // // // //     : strokeStyle || this.strokeStyle;\n    // // // // this.ctx.beginPath();\n    coor.forEach((el: Point, i) => {\n      const [x, y] = el.map((a) => Math.round(a * this.scale));\n      if (i === 0) {\n        startPoint = new fabric.Point(x, y);\n        // // // // this.ctx.moveTo(x, y);\n      } else {\n        // // // // this.ctx.lineTo(x, y);\n        endPoint = new fabric.Point(x, y);\n      }\n    });\n    if (creating) {\n      const [x, y] = this.mouse || [];\n      // this.ctx.lineTo(x, y);\n      endPoint = new fabric.Point(x, y);\n    }\n    if (startPoint && endPoint) {\n      line = new fabric.Line(\n        [startPoint.x, startPoint.y, endPoint.x, endPoint.y],\n        {\n          stroke:\n            active || creating\n              ? this.activeStrokeStyle\n              : strokeStyle || this.strokeStyle, // Line color\n          strokeWidth: this.LineWidth, // Line width\n        }\n      );\n    }\n    // Add the line to the canvas\n    this.canvas.add(line);\n    this.canvas.renderAll();\n    // // // // this.ctx.stroke();\n    // // // // this.ctx.restore();\n    if (!this.hideAnnotateLabels) this.drawLabel(coor[0], shape);\n  }\n  /**\n   * 绘制控制点\n   * @param point 坐标\n   */\n  drawCtrl(point: Point) {\n    const [x, y] = point.map((a) => a * this.scale);\n\n    const cirle = new fabric.Circle({\n      left: x,\n      top: y,\n      radius: this.ctrlRadius, // Adjust the dot size as needed\n      fill: this.ctrlFillStyle, // Dot color,\n      stroke: this.ctrlStrokeStyle,\n    });\n    this.canvas.add(cirle);\n    this.canvas.renderAll();\n\n    // // // // this.ctx.save();\n    // // // // this.ctx.beginPath();\n    // // // // this.ctx.fillStyle = this.ctrlFillStyle;\n    // // // // this.ctx.strokeStyle = this.ctrlStrokeStyle;\n    // // // // this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n    // // // // this.ctx.fill();\n    // // // // this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n    // // // // this.ctx.stroke();\n    // // // // this.ctx.restore();\n  }\n  /**\n   * 绘制控制点列表\n   * @param shape 标注实例\n   */\n  drawCtrlList(shape: Rect | Polygon | Line | Connectivity) {\n    shape.ctrlsData.forEach((point, i) => {\n      if (shape.type === 5) {\n        if (i === 1) this.drawCtrl(point);\n      } else {\n        this.drawCtrl(point);\n      }\n    });\n  }\n  /**\n   * 绘制label\n   * @param point 位置\n   * @param label 文本\n   */\n  drawLabel(point: Point, shape: AllShape) {\n    const {\n      label = \"\",\n      labelFillStyle = \"\",\n      labelFont = \"\",\n      textFillStyle = \"\",\n      hideLabel = false,\n    } = shape;\n    if (label.length && !(hideLabel || this.hideLabel)) {\n      // // // // this.ctx.font = labelFont || this.labelFont;\n      // // // // const textH = parseInt(this.ctx.font) + 6;\n      const lblFont = labelFont || this.labelFont;\n      const textH = parseInt(lblFont) + 6;\n      const newText =\n        label.length < this.labelMaxLen + 1\n          ? label\n          : `${label.slice(0, this.labelMaxLen)}...`;\n\n      const lbl = new fabric.Text(newText, {\n        fontSize: 16,\n        fill: textFillStyle || this.textFillStyle,\n      });\n      // const text = this.ctx.measureText(newText);\n      const text = lbl;\n      const [x, y] = point.map((a) => a * this.scale);\n      const toleft =\n        this.IMAGE_ORIGIN_WIDTH - point[0] < (text.width + 4) / this.scale;\n      const toTop = this.IMAGE_ORIGIN_HEIGHT - point[1] < textH / this.scale;\n\n      lbl.set({\n        left: toleft ? x - text.width - 2 : x + 2,\n        top: toTop ? y - 3 : y + textH - 4,\n      });\n      // Add the text to the canvas\n      this.canvas.add(lbl);\n      this.canvas.renderAll();\n      // // // // this.ctx.save();\n      // // // // this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\n      // // // // this.ctx.fillRect(\n      // // // //   toleft ? x - text.width - 3 : x + 1,\n      // // // //   toTop ? y - textH + 3 : y + 1,\n      // // // //   text.width + 4,\n      // // // //   textH\n      // // // // );\n      // // // // this.ctx.fillStyle = textFillStyle || this.textFillStyle;\n      // // // // this.ctx.fillText(\n      // // // //   newText,\n      // // // //   toleft ? x - text.width - 2 : x + 2,\n      // // // //   toTop ? y - 3 : y + textH - 4,\n      // // // //   180\n      // // // // );\n      // // // // this.ctx.restore();\n    }\n  }\n\n  /**\n   * 更新画布\n   */\n  update() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      // // // // this.ctx.save();\n      // // // // this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n      // // // // this.ctx.translate(this.originX, this.originY);\n      // // // // if (this.IMAGE_WIDTH && this.IMAGE_HEIGHT) {\n      // // // //   this.canvas.sty le.width = this.IMAGE_WIDTH + \"px\";\n      // // // //   this.canvas.style.height = this.IMAGE_HEIGHT + \"px\";\n      // // // //   this.canvas.width = this.IMAGE_WIDTH;\n      // // // //   this.canvas.height = this.IMAGE_HEIGHT;\n      // // // //   this.canvas.parentElement.scrollLeft = this.originX * -1;\n      // // // //   this.canvas.parentElement.scrollTop = this.originY * -1;\n      // // // //   this.ctx.drawImage(\n      // // // //     this.image,\n      // // // //     0,\n      // // // //     0,\n      // // // //     this.IMAGE_WIDTH,\n      // // // //     this.IMAGE_HEIGHT\n      // // // //   );\n      // // // // }\n      let renderList = this.focusMode\n        ? this.activeShape.type\n          ? [this.activeShape]\n          : []\n        : this.dataset;\n      for (let i = 0; i < renderList.length; i++) {\n        const shape = renderList[i];\n        if (shape.hide) continue;\n        switch (shape.type) {\n          case 1:\n            this.drawRect(shape as Rect);\n            break;\n          case 2:\n            this.drawPolygon(shape as Polygon);\n            break;\n          case 3:\n            this.drawDot(shape as Dot);\n            break;\n          case 4:\n          case 6:\n            if (\n              !this.activeShape.creating &&\n              shape.rectangleConnectivity.length > 0\n            ) {\n              this.parentRectangleConnectivity = this.dataset.find(\n                (i) => i.index === shape.rectangleConnectivity[0][0]\n              );\n              this.childRectangleConnectivity = this.dataset.find(\n                (i) => i.index === shape.rectangleConnectivity[0][1]\n              );\n\n              if (\n                this.parentRectangleConnectivity &&\n                this.childRectangleConnectivity\n              ) {\n                let rect1: any = this.getDomRect(\n                  this.parentRectangleConnectivity.coor\n                );\n                let rect2: any = this.getDomRect(\n                  this.childRectangleConnectivity.coor\n                );\n                this.drawShortestLine(rect1, rect2, shape);\n              }\n            } else {\n              this.drawLine(shape as Line | Connectivity);\n            }\n            break;\n          case 5:\n            this.drawCirle(shape as Circle);\n            break;\n          case 7:\n          case 9:\n            this.drawRect(shape as Rect);\n            break;\n          case 8:\n            this.drawRect(shape as Rect);\n            break;\n          default:\n            break;\n        }\n      }\n      if (\n        [1, 2, 4, 5, 6, 7, 8].includes(this.activeShape.type) &&\n        !this.activeShape.hide\n      ) {\n        this.drawCtrlList(this.activeShape);\n      }\n      // // // // this.ctx.restore();\n      this.emit(\"updated\", this.dataset);\n    });\n  }\n\n  /**\n   * 删除指定矩形\n   * @param index number\n   */\n  deleteByIndex(index: number) {\n    const num = this.dataset.findIndex((x) => x.index === index);\n    const removedDatasetsIndex = [num];\n    const connectivityArray =\n      this.dataset[num].rectangleConnectivity.length > 0\n        ? this.dataset[num].rectangleConnectivity\n        : [];\n\n    // Remove all the connectivity relative to the delete doc.\n    if (connectivityArray.length > 0) {\n      for (let i = 0; i < connectivityArray.length; i++) {\n        const [x, y] = connectivityArray[i].map((el: Point) => el);\n        if (this.dataset[num].type === 6) {\n          const parentEl = this.dataset.find(\n            (el) => el.index === x\n          ).rectangleConnectivity;\n          const childEl = this.dataset.find(\n            (el) => el.index === y\n          ).rectangleConnectivity;\n          parentEl.forEach((element: Point, i: number) => {\n            if (element[0] === x && element[1] === y) {\n              parentEl.splice(i, 1);\n            }\n          });\n          childEl.forEach((element: Point, i: number) => {\n            if (element[0] === x && element[1] === y) {\n              childEl.splice(i, 1);\n            }\n          });\n        } else {\n          this.dataset.forEach((item, dataIndex) => {\n            if ((item.rectangleConnectivity?.length > 0, dataIndex !== num)) {\n              item.rectangleConnectivity.forEach((rec: Point, i: number) => {\n                if (rec[0] === x && rec[1] === y) {\n                  item.rectangleConnectivity.splice(i, 1);\n                }\n              });\n            }\n          });\n\n          if (this.dataset[num]?.lineCoorIndex.length > 0) {\n            const listofLineIndex = this.dataset[num].lineCoorIndex;\n\n            listofLineIndex.forEach((el: number, i: number) => {\n              removedDatasetsIndex.push(\n                this.dataset.findIndex((item) => item.index === el)\n              );\n              this.dataset.forEach((item, $i) => {\n                if (item.lineCoorIndex?.length > 0 && $i !== num) {\n                  if (item.lineCoorIndex.findIndex((e) => e === el) !== -1)\n                    item.lineCoorIndex.splice(\n                      item.lineCoorIndex.findIndex((e) => e === el),\n                      1\n                    );\n                }\n              });\n            });\n          }\n        }\n      }\n    }\n\n    // END\n    if (num > -1) {\n      this.emit(\"delete\", this.dataset[num]);\n      const newArray = this.dataset.filter(\n        (item, index) => !removedDatasetsIndex.includes(index)\n      );\n      newArray.forEach((item, i) => {\n        let oldIndex = item.index;\n        let newIndex = i;\n        const isLine = item.lineCoorIndex.length === 0;\n        newArray.forEach((item$, i$) => {\n          if (item$.rectangleConnectivity?.length > 0) {\n            item$.rectangleConnectivity = item$.rectangleConnectivity.map(\n              (conn: Point) => {\n                let [x, y] = conn.map((el) => el);\n                if (x === oldIndex) {\n                  x = newIndex;\n                }\n                if (y === oldIndex) {\n                  y = newIndex;\n                }\n                conn = [x, y];\n                return conn;\n              }\n            );\n          }\n          if (item$.lineCoorIndex?.length > 0 && isLine) {\n            item$.lineCoorIndex = item$.lineCoorIndex.map((elm: number) => {\n              if (elm === oldIndex) elm = newIndex;\n              return elm;\n            });\n          }\n        });\n        item.index = i;\n      });\n      this.dataset = newArray;\n      this.update();\n    }\n  }\n\n  /**\n   * 计算缩放步长\n   */\n  calcStep(flag = \"\") {\n    if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\n      if (flag === \"\" || flag === \"b\") {\n        this.setScale(true, false, true);\n        this.calcStep(\"b\");\n      }\n    }\n    // if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\n    //   if (flag === \"\" || flag === \"s\") {\n    //     this.setScale(false, false, true);\n    //     this.calcStep(\"s\");\n    //   }\n    // }\n  }\n\n  /**\n   * 缩放\n   * @param type true放大5%，false缩小5%\n   * @param center 缩放中心 center|mouse\n   * @param pure 不绘制\n   */\n  setScaleOld(type: boolean, byMouse = false, pure = false) {\n    if (this.lock) return;\n    if (\n      (!type &&\n        ((this.IMAGE_WIDTH <= this.WIDTH && this.IMAGE_HEIGHT <= this.HEIGHT) ||\n          this.scaleStep < 0)) ||\n      (type && this.IMAGE_WIDTH >= this.imageOriginMax * 10)\n    )\n      return;\n\n    if (type) {\n      this.scaleStep++;\n    } else {\n      this.scaleStep--;\n    }\n    let realToLeft = 0;\n    let realToRight = 0;\n    const [x, y] = this.mouse || [];\n    if (byMouse) {\n      realToLeft = (x - this.originX) / this.scale;\n      realToRight = (y - this.originY) / this.scale;\n    }\n    const abs = Math.abs(this.scaleStep);\n    const width = this.IMAGE_WIDTH;\n    this.IMAGE_WIDTH = Math.round(\n      this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95)\n    );\n    this.IMAGE_HEIGHT = Math.round(\n      this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95)\n    );\n    if (byMouse) {\n      this.originX = x - realToLeft * this.scale;\n      this.originY = y - realToRight * this.scale;\n    } else {\n      const scale = this.IMAGE_WIDTH / width;\n      this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\n      this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\n    }\n    if (!pure) {\n      this.update();\n    }\n  }\n\n  setScale(type: boolean, byMouse = false, pure = false) {\n    if (this.lock) return;\n    if (\n      (!type &&\n        ((this.IMAGE_WIDTH <= this.WIDTH && this.IMAGE_HEIGHT <= this.HEIGHT) ||\n          this.scaleStep < 0)) ||\n      (type && this.IMAGE_WIDTH >= this.imageOriginMax * 10)\n    )\n      return;\n\n    let currentZoomLevel = this.ZoomLevel;\n    let zoomStep = 10;\n    let newZoomLevel = currentZoomLevel;\n    let zoomResetScale = 100 / currentZoomLevel;\n    if (type) {\n      newZoomLevel += zoomStep;\n      if (newZoomLevel > 400) newZoomLevel = 400;\n      // this.scaleStep++;\n    } else {\n      newZoomLevel -= zoomStep;\n      if (newZoomLevel < 100) newZoomLevel = 100;\n      // this.scaleStep--;\n    }\n    let realToLeft = 0;\n    let realToRight = 0;\n    const [x, y] = this.mouse || [];\n    if (byMouse) {\n      realToLeft = (x - this.originX) / this.scale;\n      realToRight = (y - this.originY) / this.scale;\n    }\n    const abs = Math.abs(this.scaleStep);\n    const width = this.IMAGE_WIDTH;\n    let originalImageWidth = this.IMAGE_WIDTH * zoomResetScale;\n    let originalImageHeight = this.IMAGE_HEIGHT * zoomResetScale;\n    this.IMAGE_WIDTH = Math.round(originalImageWidth * (newZoomLevel / 100));\n    this.IMAGE_HEIGHT = Math.round(originalImageHeight * (newZoomLevel / 100));\n    this.ZoomLevel = newZoomLevel;\n    if (byMouse) {\n      this.originX -= x / (this.scale * newZoomLevel) - x / this.scale;\n      this.originY -= y / (this.scale * newZoomLevel) - y / this.scale;\n    } else {\n      const scale = this.IMAGE_WIDTH / width;\n      this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\n      this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\n    }\n    if (!pure && currentZoomLevel !== newZoomLevel) {\n      this.update();\n    }\n  }\n\n  /**\n   * 适配背景图\n   */\n  fitZoom() {\n    this.calcStep();\n    if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\n      this.IMAGE_WIDTH =\n        this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\n      this.IMAGE_HEIGHT = this.HEIGHT;\n    } else {\n      this.IMAGE_WIDTH = this.WIDTH;\n      this.IMAGE_HEIGHT =\n        this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\n    }\n    this.originX = 0;\n    this.originY = 0;\n    this.ZoomLevel = 100;\n    this.update();\n  }\n  /**\n   * 设置专注模式\n   * @param type {boolean}\n   */\n  setFocusMode(type: boolean) {\n    this.focusMode = type;\n    this.update();\n  }\n  /**\n   * 销毁\n   */\n  destroy() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n    // // // // this.canvas.removeEventListener(\"contextmenu\", this.handleContextmenu);\n    // // // // this.canvas.removeEventListener(\"mousewheel\", this.handleMousewheel);\n    // // // // this.canvas.removeEventListener(\"wheel\", this.handleMousewheel);\n    // // // // this.canvas.removeEventListener(\"mousedown\", this.handleMouseDown);\n    // // // // this.canvas.removeEventListener(\"touchend\", this.handleMouseDown);\n    // // // // this.canvas.removeEventListener(\"mousemove\", this.handelMouseMove);\n    // // // // this.canvas.removeEventListener(\"touchmove\", this.handelMouseMove);\n    // // // // this.canvas.removeEventListener(\"mouseup\", this.handelMouseUp);\n    // // // // this.canvas.removeEventListener(\"mouseleave\", this.handelLeave);\n    // // // // this.canvas.removeEventListener(\"touchend\", this.handelMouseUp);\n    // // // // this.canvas.removeEventListener(\"dblclick\", this.handelDblclick);\n    this.canvas.off(\"contextmenu\", this.handleContextmenu as any);\n    this.canvas.off(\"mousewheel\", this.handleMousewheel as any);\n    this.canvas.off(\"wheel\", this.handleMousewheel as any);\n    this.canvas.off(\"mousedown\", this.handleMouseDown as any);\n    this.canvas.off(\"touchend\", this.handleMouseDown as any);\n    this.canvas.off(\"mousemove\", this.handelMouseMove as any);\n    this.canvas.off(\"touchmove\", this.handelMouseMove as any);\n    this.canvas.off(\"mouseup\", this.handelMouseUp as any);\n    this.canvas.off(\"mouseleave\", this.handelLeave);\n    this.canvas.off(\"touchend\", this.handelMouseUp as any);\n    this.canvas.off(\"dblclick\", this.handelDblclick as any);\n    document.body.removeEventListener(\"keyup\", this.handelKeyup);\n    this.canvasParentNode.removeEventListener(\"scroll\", this.handleScroll);\n    // // // // this.canvas.width = this.WIDTH;\n    // // // // this.canvas.height = this.HEIGHT;\n    // // // // this.canvas.style.width = null;\n    // // // // this.canvas.style.height = null;\n    // // // // this.canvas.style.userSelect = null;\n    this.canvas.setWidth(this.WIDTH);\n    this.canvas.setHeight(this.HEIGHT);\n    this.canvas.renderAll();\n  }\n  /**\n   * 重新设置画布大小\n   */\n  resize() {\n    this.canvas.setWidth(null);\n    this.canvas.setHeight(null);\n    this.canvas.renderAll();\n    // // // // this.canvas.width = null;\n    // // // // this.canvas.height = null;\n    // // // // this.canvas.style.width = null;\n    // // // // this.canvas.style.height = null;\n    this.initSetting();\n    this.update();\n  }\n}\n"],"names":["Shape","item","index","this","label","hideLabel","coor","rectangleConnectivity","lineCoorIndex","active","creating","dragging","uuid","s","hexDigits","i","m","Math","floor","random","slice","n","join","createUuid","data","previousCoor","Object","assign","Rect","_super","_this","call","type","__extends","defineProperty","prototype","get","_a","__read","_b","x0","y0","_c","x1","y1","Polygon","length","Dot","EventBus","_eventTree","on","eventName","cb","fns","Array","isArray","push","emit","payload","_i","arguments","forEach","fn","apply","__spreadArray","off","find","splice","Line","Circle","radius","x","y","Connectivity","CanvasSelect","el","src","version","pkg","lock","MIN_WIDTH","MIN_HEIGHT","MIN_RADIUS","strokeStyle","fillStyle","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","labelFillStyle","labelFont","textFillStyle","labelMaxLen","WIDTH","HEIGHT","dataset","remmberOrigin","createType","ctrlIndex","cursor","image","Image","IMAGE_WIDTH","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","originX","originY","scaleStep","scrollZoom","dblTouch","dblTouchStore","alpha","focusMode","scaleTouchStore","isTouch2","isDragging","dragStartX","dragStartY","allowPanning","RemoveSelectionOnKey","parentRectangleConnectivity","childRectangleConnectivity","keyRectangleConnectivity","valueRectangleConnectivity","hideAnnotateLabels","LineWidth","ZoomLevel","ScrollTop","scrollStartX","scrollStartY","rightClickMoveEvent","handleLoad","bind","handleContextmenu","handleMousewheel","handleScroll","handleMouseDown","handelMouseMove","handelMouseUp","handelLeave","handelDblclick","handelKeyup","container","document","querySelector","HTMLCanvasElement","canvas","fabric","Canvas","canvasParentNode","getElement","parentNode","offScreen","createElement","initSetting","initEvents","setImage","console","warn","set","value","IMAGE_ORIGIN_WIDTH","min","max","mergeEvent","e","mouseX","mouseY","mouseCX","mouseCY","isMobile","window","TouchEvent","touches","clientX","clientY","target","getBoundingClientRect","left","top_1","top","round","_d","clientX1","_e","clientY1","abs","offsetX","offsetY","__assign","width","height","fitZoom","preventDefault","scrollLeft","scrollTop","evt","ctrlKey","stopPropagation","mouse","setScale","deltaY","buttons","which","scale","ctrls","activeShape","ctrlsData","findIndex","isPointInCircle","remmber","isInBackground","includes","nx","ny","createConnectivity","newShape","curPoint","findReactengle","sp","hitOnShape","hitShapeIndex_1","hitShape","pt","sort","a","b","update","deltaX","_f","_g","_h","a0","b0","_j","a1","b1","concat","newPoint","newRadius","noLimit","w","h","_k","t1","tar","_l","r","sqrt","pow","touch0","touch1","cur","Date","now","pop","keyValueConnectivity","_m","_o","activeElement","body","key","deleteByIndex","shape","map","isArrayInArray","num","parentArr","childArr","comp","parentCheck","some","e1","e2","childCheck","getDomRect","drawShortestLine","rect1","rect2","closestMidpoints","getClosestMidpoints","drawLine","midpoints1","getMidpoints","midpoints2","closestDistance","Infinity","j","distance","getDistance","rect","midX","midY","point1","point2","dx","dy","dpr","devicePixelRatio","style","userSelect","clientWidth","clientHeight","addEventListener","url","setData","setTimeout","initdata","toString","indexOf","mousePoint","hitShapeIndex","isPointInRect","isPointInPolygon","isPointInLine","point","center","x2","y2","isPointOnLine","buffer","circleLineIntersect","cx","cy","u","closestX","closestY","drawRect","fill","stroke","strokeWidth","add","renderAll","drawLabel","drawPolygon","drawDot","dot","drawCirle","cirle","startPoint","endPoint","line","Point","drawCtrl","drawCtrlList","lblFont","textH","parseInt","newText","lbl","Text","fontSize","text","toleft","toTop","clearTimeout","timer","renderList","hide","removedDatasetsIndex","connectivityArray","this_1","parentEl_1","childEl_1","element","dataIndex","rec","$i","newArray_1","filter","oldIndex","newIndex","isLine","item$","i$","conn","elm","calcStep","flag","setScaleOld","byMouse","pure","imageOriginMax","realToLeft","realToRight","currentZoomLevel","newZoomLevel","zoomResetScale","originalImageWidth","originalImageHeight","setFocusMode","destroy","removeEventListener","setWidth","setHeight","resize"],"mappings":"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"}